<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="The Gutmann method used for overwriting is based on Peter Gutmann's paper \&quot;Secure Deletion of Data from Magnetic and Solid-State Memory\&quot;.\nThe Schneier 7-pass method is based on Bruce Schneier's algorithm using a Random Number Generator to wipe with random data.\nThe DoD 3-, 7- and N-pass method is based on the US Department of Defense's \&quot;National Industrial Security Program Operating Manual.\n\nAll the methods are selected to effectively remove magnetic remnants from the drive in a secure and easy way.\n\nEraser Development Team:\n\u2022 Garrett Trant:		Mentor/Researcher\n\u2022 Joel Low:		Developer Lead\n\u2022 Dennis van Lith:		Designer\n\u2022 Kasra Nasiri:		Developer\n" xml:space="preserve">
    <value>The Gutmann method used for overwriting is based on Peter Gutmann's paper \"Secure Deletion of Data from Magnetic and Solid-State Memory\".\nThe Schneier 7-pass method is based on Bruce Schneier's algorithm using a Random Number Generator to wipe with random data.\nThe DoD 3-, 7- and N-pass method is based on the US Department of Defense's \"National Industrial Security Program Operating Manual.\n\nAll the methods are selected to effectively remove magnetic remnants from the drive in a secure and easy way.\n\nEraser Development Team:\n\u2022 Garrett Trant:		Mentor/Researcher\n\u2022 Joel Low:		Developer Lead\n\u2022 Dennis van Lith:		Designer\n\u2022 Kasra Nasiri:		Developer\n</value>
  </data>
  <data name="Eraser" xml:space="preserve">
    <value>Eraser</value>
  </data>
  <data name="copyright \u00a9 2008 The Eraser Project" xml:space="preserve">
    <value>copyright \u00a9 2008 The Eraser Project</value>
  </data>
  <data name="Eraser is free open-source software!" xml:space="preserve">
    <value>Eraser is free open-source software!</value>
  </data>
  <data name="Please help us continue develop Eraser, donate some coffee..." xml:space="preserve">
    <value>Please help us continue develop Eraser, donate some coffee...</value>
  </data>
  <data name="Erase Schedule" xml:space="preserve">
    <value>Erase Schedule</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Processing:" xml:space="preserve">
    <value>Processing:</value>
  </data>
  <data name="Could not load task list. All task entries have been lost." xml:space="preserve">
    <value>Could not load task list. All task entries have been lost.</value>
  </data>
  <data name="Could not load list of files used for plausible deniability.\n\nThe list of files have been lost." xml:space="preserve">
    <value>Could not load list of files used for plausible deniability.\n\nThe list of files have been lost.</value>
  </data>
  <data name="Could not load the setting {0} for plugin {1}.The setting has been lost." xml:space="preserve">
    <value>Could not load the setting {0} for plugin {1}.The setting has been lost.</value>
  </data>
  <data name="{0} out of {1}" xml:space="preserve">
    <value>{0} out of {1}</value>
  </data>
  <data name="{0} left" xml:space="preserve">
    <value>{0} left</value>
  </data>
  <data name="Total: {0}%" xml:space="preserve">
    <value>Total: {0}%</value>
  </data>
  <data name="Completed with warnings" xml:space="preserve">
    <value>Completed with warnings</value>
  </data>
  <data name="Completed with errors" xml:space="preserve">
    <value>Completed with errors</value>
  </data>
  <data name="Not completed" xml:space="preserve">
    <value>Not completed</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>Completed</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Queued for execution" xml:space="preserve">
    <value>Queued for execution</value>
  </data>
  <data name="Not queued" xml:space="preserve">
    <value>Not queued</value>
  </data>
  <data name="Running..." xml:space="preserve">
    <value>Running...</value>
  </data>
  <data name="Queued for execution." xml:space="preserve">
    <value>Queued for execution.</value>
  </data>
  <data name="User interface language" xml:space="preserve">
    <value>User interface language</value>
  </data>
  <data name="Default file erasure method" xml:space="preserve">
    <value>Default file erasure method</value>
  </data>
  <data name="Default unused space erasure method" xml:space="preserve">
    <value>Default unused space erasure method</value>
  </data>
  <data name="Randomness data source" xml:space="preserve">
    <value>Randomness data source</value>
  </data>
  <data name="The following settings held invalid values:\n\n{0}\nThese settings have now been set to naive defaults.\n\nPlease check that the new settings suit your required level of security." xml:space="preserve">
    <value>The following settings held invalid values:\n\n{0}\nThese settings have now been set to naive defaults.\n\nPlease check that the new settings suit your required level of security.</value>
  </data>
  <data name="An invalid language was selected." xml:space="preserve">
    <value>An invalid language was selected.</value>
  </data>
  <data name="An invalid file erasure method was selected." xml:space="preserve">
    <value>An invalid file erasure method was selected.</value>
  </data>
  <data name="An invalid unused disk space erasure method was selected." xml:space="preserve">
    <value>An invalid unused disk space erasure method was selected.</value>
  </data>
  <data name="An invalid randomness data source was selected." xml:space="preserve">
    <value>An invalid randomness data source was selected.</value>
  </data>
  <data name="Erasures with plausible deniability was selected, but no files were selected to be used as decoys." xml:space="preserve">
    <value>Erasures with plausible deniability was selected, but no files were selected to be used as decoys.</value>
  </data>
  <data name="The new randomness data source will only be used when the next task is run.\nCurrently running tasks will use the old source." xml:space="preserve">
    <value>The new randomness data source will only be used when the next task is run.\nCurrently running tasks will use the old source.</value>
  </data>
  <data name="The erasure method selected does not support unused disk space erasures." xml:space="preserve">
    <value>The erasure method selected does not support unused disk space erasures.</value>
  </data>
  <data name="Invalid file path" xml:space="preserve">
    <value>Invalid file path</value>
  </data>
  <data name="Invalid folder path" xml:space="preserve">
    <value>Invalid folder path</value>
  </data>
  <data name="The task has no data to erase." xml:space="preserve">
    <value>The task has no data to erase.</value>
  </data>
  <data name="The task needs to run on at least one day a week" xml:space="preserve">
    <value>The task needs to run on at least one day a week</value>
  </data>
</root>